
/*
Во-первых, нам нужно сообщить работнику сервиса, что нужно кэшировать.
Мы уже создали простой offline page (public/offline.html), который
будет отображаться каждый раз, когда нет сетевого подключения
*/
// CODELAB: Update cache names any time any of the cached files change.
const FILES_TO_CACHE = [
  '/offline.html',
];


/*
нам нужно обновить событие install чтобы указать работнику сервиса предварительно
кэшировать автономную страницу
*/
// CODELAB: Precache static resources here.
evt.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('[ServiceWorker] Pre-caching offline page');
      return cache.addAll(FILES_TO_CACHE);
    })
);
/*
Наше событие install теперь открывает кеш с caches.open() и предоставляет имя кеша.
Предоставление имени кэша позволяет нам создавать версии файлов или отделять данные от
кэшированных ресурсов, чтобы мы могли легко обновить одно, но не влиять на другое.
Когда кеш открыт, мы можем вызвать cache.addAll() , который берет список URL-адресов,
выбирает их с сервера и добавляет ответ в кеш. Обратите внимание, что cache.addAll()
будет отклонен, если какой-либо из отдельных запросов потерпит неудачу. Это означает,
что вам гарантировано, что, если этап установки пройдет успешно, ваш кеш будет в
согласованном состоянии. Но если по какой-то причине произойдет сбой, он автоматически
попытается снова при следующем запуске сервисного работника.

/*=================================*/
/* Очистить старые офлайн-страницы */
/*=================================*/
/*
Мы будем использовать событие activate для очистки любых старых данных в нашем кеше.
Этот код гарантирует, что ваш сервисный работник обновляет свой кэш всякий раз,
когда изменяется какой-либо из файлов оболочки приложения.
Чтобы это работало, вам нужно CACHE_NAME переменную CACHE_NAME в верхней части файла рабочего сервиса.
*/
// CODELAB: Remove previous cached data from disk.
evt.waitUntil(
    caches.keys().then((keyList) => {
      return Promise.all(keyList.map((key) => {
        if (key !== CACHE_NAME) {
          console.log('[ServiceWorker] Removing old cache', key);
          return caches.delete(key);
        }
      }));
    })
);



